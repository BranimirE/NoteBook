/////////////////////// Suffix Array  ///////////////
 Algunas Aplicaciones
   /////////////// Rotacion lexicografica menor ///////////////
    scanf("%s",&s);
		tam1=strlen(s);
		for(int i=tam1;i<2*tam1;i++){
			s[i]=s[i-tam1];
		}
		n=2*tam1;
		s[n++]='~';	//cual quiera de estos { | } ~
		suff_arr();
		char cam[tam1];
		for(int i=0;i<n;i++){
			if(r[i]<tam1){
				printf("%d\n",r[i]+1);	//inicio lexicografica
				for(int j=r[i];j<r[i]+tam1;j++)
					cam[j-r[i]]=s[j];     //llenar camino
				break;
			}
		}
		for(int i=0;i<tam1;i++){
			printf("%c",cam[i]);	//print camino
		}
	//nota es un poco caro 
		
/////////////////////// palindromo mas grande ///////////////
usar Manachaer
/////////////////////// mayor substring 2 cadenas ///////////////
n,m tamanio respectivo de las cadenas 1,2 respectivamente
int owner(int idx){
    return (idx < n-m-1) ? 1 : 2;
}
//main
for(int i=0;i<n;i++){
         if(owner(r[i]) != owner(r[i-1])){   //por si quiere mostrat $ o #
            ans=max(ans,h[i-1]);	     // ans subcadena maxima
         }
}
//end main
/////////////////////// subcadenas distintas ///////////////
int dev=s.size()*(s.size()+1)/2;
s += '$';
suff_arr();lcp();
for(int i=0;i<n;i++)dev-=h[i];
///////////////////////  FIN SUFFIX ARRAY   ///////////////

